# -*- coding: utf-8 -*-
"""Python_Data_Analysis_Part_C_Matplotlib.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1P-dO8YzfhAMfX2dbW3iUeU84xMsyT4tx

# 基础环境
"""

! rm /etc/localtime
! ln -s /usr/share/zoneinfo/Asia/Hong_Kong /etc/localtime
! dpkg-reconfigure tzdata

! sudo apt-get install screenfetch -q=2
! screenfetch

! sudo lsb_release -a
! echo
! /opt/bin/nvidia-smi

import scipy
import platform
import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib as mpl
import matplotlib.pyplot as plt
from mpl_toolkits import mplot3d

print('Python   version:', platform.python_version())
print('Numpy    version:', np.__version__)
print('Pandas   version:', pd.__version__)
print("Matplotlib ver'n:", mpl.__version__)
print('Seaborn  version:', sns.__version__)
print("SciPy    version:", scipy.__version__)

plt.style.use('seaborn-whitegrid')

r = np.random.RandomState(0)

"""# 基本操作"""

x = np.linspace(0, 10, 100)

plt.plot(x, np.sin(x))
plt.plot(x, np.cos(x))

plt.show()

x = np.linspace(0, 3 * np.pi, 100)

plt.plot(x, np.sin(x), color='green')
plt.plot(x, np.cos(x), color='0.85')
plt.plot(x, -np.sin(x), color='#0000CC')
plt.plot(x, -np.cos(x), color=(.8, 0, 0))

plt.show()

x = np.linspace(0, 3 * np.pi, 100)

plt.plot(x, np.sin(x), linestyle='-')
plt.plot(x, np.cos(x), linestyle=':')
plt.plot(x, -np.sin(x), '--c')
plt.plot(x, -np.cos(x), '-.r')

plt.show()

x = np.linspace(0, 3 * np.pi, 100)

plt.plot(x, np.sin(x))
plt.plot(x, np.cos(x))
plt.plot(x, -np.sin(x))
plt.plot(x, -np.cos(x))

plt.xlim(0, 10)
plt.ylim(-1.2, 1.2)

plt.show()

x = np.linspace(0, 2 * np.pi, 100)

plt.plot(np.sin(x), np.sin(x))
plt.plot(np.sin(x), np.sin(x + np.pi))
plt.plot(np.sin(x), np.sin(x + np.pi/2))
plt.plot(np.sin(x), np.sin(x + np.pi/4))
plt.plot(np.sin(x), np.sin(x + np.pi*3/4))

plt.axis('equal')

plt.show()

x = np.linspace(0, 2 * np.pi, 100)

plt.plot(np.sin(x), np.sin(x))
plt.plot(np.sin(x), np.sin(x + np.pi))
plt.plot(np.sin(x), np.sin(x + np.pi/2))
plt.plot(np.sin(x), np.sin(x + np.pi/4))
plt.plot(np.sin(x), np.sin(x + np.pi*3/4))

plt.axis('equal')

plt.title('Lissajous Figures')
plt.xlabel('x')
plt.ylabel('y')
plt.legend(['a', 'b', 'c', 'd', 'e'])

plt.show()

x = np.linspace(0, 10, 100)

plt.plot(x, np.sin(x))
plt.plot(x, np.cos(x))


plt.title('Trigonometric Functions')
plt.xlabel('x')
plt.ylabel('y = f(x)')
plt.legend(['sin(x)', 'cos(x)'], 
           loc='lower left', frameon=True, shadow=True, framealpha=0.9)

plt.show()

fig, ax = plt.subplots()

x = np.linspace(0, 10, 100)

y1 = ax.plot(x, np.sin(x))
y2 = ax.plot(x, np.cos(x), label='cos(x)')

ax.legend(frameon=True, framealpha=0.4)

plt.show()

x = np.linspace(0, 10, 500)
y = np.cumsum(r.randn(500, 6), 0)

plt.plot(x, y)
plt.legend('ABCDEF', ncol=2, loc='upper left')

plt.show()

x = r.randn(100)
y = r.randn(100)
color = r.rand(100)
size = r.rand(100) * 1000

plt.scatter(x, y, c=color, s=size, alpha=.6, cmap='viridis')
plt.colorbar()

for i in (.9, .7, .5, .3, .1):
    plt.scatter([], [], c='c', s=i*1000, label=f'.{i*10:g} size')

plt.xlim(-3, 6)
plt.legend(scatterpoints=1, labelspacing=2.5, title='Random Sizes', frameon=True)

plt.show()

x = np.linspace(0, 10, 1000)
img = np.sin(x) * np.cos(x[:, np.newaxis])

plt.imshow(img)
plt.colorbar()

plt.show()

x = np.linspace(0, 10, 1000)
img = np.sin(x) * np.cos(x[:, np.newaxis])

plt.imshow(img, cmap='coolwarm')
plt.colorbar()

plt.show()

x = np.linspace(0, 10, 1000)
img = np.sin(x) * np.cos(x[:, np.newaxis])

c = plt.cm.get_cmap('PuOr', 10)

plt.imshow(img, cmap=c)
plt.colorbar()

plt.show()

x = np.linspace(0, 10, 30)

plt.plot(x, np.sin(x), 'o')
plt.plot(x, -np.sin(x), '*')

plt.show()

x = np.linspace(0, 10, 30)

plt.plot(x, np.sin(x), '-o')
plt.plot(x, -np.sin(x), '-.*r')

plt.show()

for marker in ['.', 'o', '*', '+', 'x', '^', 
               '<', 's', 'd', 'p', 'h', 'H']:
    plt.plot(r.rand(5), r.rand(5), marker,
             label=f'Label: {marker}')

plt.legend(numpoints=1)
plt.xlim(-.1, 1.4)

plt.show()

x = np.linspace(0, 10, 50)
dy = x * .7
y = np.sin(x) + dy

plt.errorbar(x, y, yerr=dy, fmt='-r', ecolor='y')

plt.show()

x = np.linspace(0, 10, 20)
y = np.sin(x) + .5 * r.randn(20)

plt.errorbar(x, y, yerr=1, color='#995566', ecolor='c', 
             fmt='o', elinewidth=3, capsize=5)
plt.title('95% within 2 standard deviations')

plt.show()

x = np.linspace(0, 7, 100)
y1 = np.sin(x) + .2 * r.randn(100)
y2 = np.cos(x) + .2 * r.randn(100)

plt.plot(x, y1)
plt.plot(x, y2)

plt.fill_between(x, y1, y2, color='gray', alpha=.15)

plt.show()

x = np.linspace(0, 5, 50)
y = np.linspace(0, 5, 40)

x, y = np.meshgrid(x, y)
z = np.sin(x) ** 10 + np.cos(10 + x * y) * np.cos(x)

plt.contour(x, y, z)
plt.colorbar()

plt.show()

x = np.linspace(0, 5, 50)
y = np.linspace(0, 5, 40)

x, y = np.meshgrid(x, y)
z = np.sin(x) ** 10 + np.cos(10 + x * y) * np.cos(x)

plt.contour(x, y, z, 10, colors='g')

plt.show()

x = np.linspace(0, 5, 50)
y = np.linspace(0, 5, 40)

x, y = np.meshgrid(x, y)
z = np.sin(x) ** 10 + np.cos(10 + x * y) * np.cos(x)

plt.contour(x, y, z, 30, cmap='coolwarm')
plt.colorbar()

plt.show()

x = np.linspace(0, 5, 50)
y = np.linspace(0, 5, 40)

x, y = np.meshgrid(x, y)
z = np.sin(x) ** 10 + np.cos(10 + x * y) * np.cos(x)

plt.imshow(z, extent=[0, 5, 0, 5], origin='lower', cmap='coolwarm')
plt.colorbar()

plt.show()

x = np.linspace(0, 5, 50)
y = np.linspace(0, 5, 40)

x, y = np.meshgrid(x, y)
z = np.sin(x) ** 10 + np.cos(10 + x * y) * np.cos(x)

contours = plt.contour(x, y, z, 3, colors='g')
plt.clabel(contours, inline=True, fontsize=8)
plt.imshow(z, extent=[0, 5, 0, 5], origin='lower', 
           cmap='RdGy', alpha=.4)
plt.colorbar()

plt.show()

data = r.randn(1000)

plt.hist(data)
plt.show()

data = r.randn(1000)

plt.hist(data, bins=100, alpha=.8, histtype='stepfilled', 
         facecolor='c', edgecolor='g')

plt.show()

data1 = r.randn(1000)
data2 = r.randn(1000) * 2 + 6
data3 = r.randn(1000) * .2 + 3

plt.hist(data1, bins=20, alpha=.7)
plt.hist(data2, bins=20, alpha=.7)
plt.hist(data3, bins=20, alpha=.7)

plt.show()

x = np.linspace(0, 7, 1000)
y1 = np.sin(x + np.pi/4) + r.randn(1000) * .1
y2 = np.cos(x) + r.randn(1000) * .1

plt.hist2d(y1, y2, bins=30, cmap='Blues')
plt.colorbar().set_label('counts')

plt.show()

x = np.linspace(0, 7, 1000)
y1 = np.sin(x + np.pi/4) + r.randn(1000) * .1
y2 = np.cos(x) + r.randn(1000) * .1

plt.hexbin(y1, y2, gridsize=30, cmap='Blues', color='grey')
plt.colorbar(label='counts')

plt.show()

m1 = r.randn(2000)
m2 = r.randn(2000) * .5
m1, m2 = m1 + m2, m1 - m2

xmin, xmax = m1.min(), m1.max()
ymin, ymax = m2.min(), m2.max()

values = np.vstack([m1, m2])
kernel = scipy.stats.gaussian_kde(values)

x, y = np.mgrid[xmin:xmax:100j, ymin:ymax:100j]
positions = np.vstack([x.ravel(), y.ravel()])

z = np.reshape(kernel(positions).T, x.shape)

plt.plot(m1, m2, 'k.', markersize=1)
plt.imshow(z, origin='lower', 
           extent=[xmin, xmax, ymin, ymax], 
           cmap=plt.cm.gist_earth_r)
plt.colorbar(label='density')

plt.show()

fig = plt.figure()

ax1 = fig.add_axes([.1, .5, .8, .4], ylim=(-1.2, 1.2), xticklabels=[])
ax2 = fig.add_axes([.1, .1, .8, .4], ylim=(-1.2, 1.2))

x = np.linspace(0, 10)

ax1.plot(x, np.sin(x))
ax2.plot(x, np.cos(x))

plt.show()

for i in range(1, 7):
    plt.subplot(2, 3, i)
    plt.text(.5, .5, str((2, 3, i)),
             fontsize=18, ha='center')

plt.show()

fig = plt.figure()
fig.subplots_adjust(hspace=.4, wspace=.6)

for i in range(1, 7):
    ax = fig.add_subplot(2, 3, i)
    ax.text(.5, .5, str((2, 3, i)),
            fontsize=18, ha='center')

plt.show()

fig, ax = plt.subplots(2, 3, sharex=True, sharey=True)

for i in range(2):
    for j in range(3):
        ax[i, j].text(.5, .5, str((i, j)), 
                      fontsize=18, ha='center')
        
plt.show()

grid = plt.GridSpec(2, 3, wspace=.4, hspace=.3)

plt.subplot(grid[0, 0])
plt.subplot(grid[0, 1:])
plt.subplot(grid[1, :2])
plt.subplot(grid[1, 2])

plt.show()

mean, cov = [0, 0], [[1, 1], [1, 2]]
x, y = r.multivariate_normal(mean, cov, 3000).T

fig = plt.figure(figsize=(6, 6))
grid = plt.GridSpec(4, 4, hspace=.2, wspace=.2)

main = fig.add_subplot(grid[:-1, 1:])
x_hist = fig.add_subplot(grid[-1, 1:], yticklabels=[], sharex=main)
y_hist = fig.add_subplot(grid[:-1, 0], xticklabels=[], sharey=main)

main.plot(x, y, 'ob', alpha=.15)

x_hist.hist(x, 40, orientation='vertical', color='g', alpha=.6)
x_hist.invert_yaxis()

y_hist.hist(y, 40, orientation='horizontal', color='r', alpha=.6)
y_hist.invert_xaxis()

plt.show()

fig, ax = plt.subplots(facecolor='lightgray')

ax.axis([0, 10, 0, 10])
ax.text(2, 4, 'Data (2, 4)', transform=ax.transData)
ax.text(.6, .6, 'Axes (0.6, 0.6)', transform=ax.transAxes)

plt.show()

x = np.linspace(0, 20, 1000)

fig, ax = plt.subplots()
ax.plot(x, np.cos(x))
ax.axis('equal')

ax.annotate('LOCAL MAXIMUM', xy=(2*np.pi, 1), xytext=(10, 4),
            arrowprops=dict(facecolor='grey', shrink=.1))
ax.annotate('LOCAL MINIMUM', xy=(5*np.pi, -1), xytext=(2, -6),
            arrowprops=dict(arrowstyle='->',
                            connectionstyle='angle3, angleA=0, angleB=-90'))

plt.show()

x = np.linspace(0, 100, 10000)

ax = plt.axes(xscale='log', yscale='log')
ax.plot(x, np.sin(x))

ax.yaxis.set_major_locator(plt.NullLocator())
ax.xaxis.set_major_formatter(plt.NullFormatter())

plt.show()

x = np.linspace(0, 3*np.pi, 100)

fig, ax = plt.subplots()

ax.plot(x, np.sin(x), lw=3, label='sin')
ax.plot(x, np.cos(x), lw=3, label='cos')

ax.legend(frameon=True)
ax.axis('equal')
ax.xaxis.set_major_locator(plt.MultipleLocator(np.pi/2))

plt.show()

data = r.randn(1000)

ax = plt.axes()
ax.set_axisbelow(True)

plt.grid(color='c', linestyle='solid')

for spine in ax.spines.values():
    spine.set_visible(False)

ax.xaxis.tick_bottom()
ax.yaxis.tick_left()

ax.tick_params(color='g', direction='out')

for tick in ax.get_xticklabels():
    tick.set_color('#7DBB97')

for tick in ax.get_yticklabels():
    tick.set_color('#7DBB97')

plt.hist(data, color='#2DE47C', edgecolor='#119B4C')
plt.show()

with plt.style.context('classic'):
    x = np.linspace(0, 10)
    data = r.randn(1000)
    fig = plt.figure()
    ax1 = fig.add_axes([.1, .5, .8, .4], ylim=(-1.2, 1.2), xticklabels=[])
    ax2 = fig.add_axes([.1, .1, .8, .4])
    ax1.plot(np.sin(x))
    ax1.plot(np.cos(x))
    ax2.hist(data)
    plt.show()

with plt.style.context('grayscale'):
    x = np.linspace(0, 10)
    data = r.randn(1000)
    fig = plt.figure()
    ax1 = fig.add_axes([.1, .5, .8, .4], ylim=(-1.2, 1.2), xticklabels=[])
    ax2 = fig.add_axes([.1, .1, .8, .4])
    ax1.plot(np.sin(x))
    ax1.plot(np.cos(x))
    ax2.hist(data)
    plt.show()

with plt.style.context('fivethirtyeight'):
    x = np.linspace(0, 10)
    data = r.randn(1000)
    fig = plt.figure()
    ax1 = fig.add_axes([.1, .5, .8, .4], ylim=(-1.2, 1.2), xticklabels=[])
    ax2 = fig.add_axes([.1, .1, .8, .4])
    ax1.plot(np.sin(x))
    ax1.plot(np.cos(x))
    ax2.hist(data)
    plt.show()

with plt.style.context('ggplot'):
    x = np.linspace(0, 10)
    data = r.randn(1000)
    fig = plt.figure()
    ax1 = fig.add_axes([.1, .5, .8, .4], ylim=(-1.2, 1.2), xticklabels=[])
    ax2 = fig.add_axes([.1, .1, .8, .4])
    ax1.plot(np.sin(x))
    ax1.plot(np.cos(x))
    ax2.hist(data)
    plt.show()

ax = plt.axes(projection='3d')

plt.show()

ax = plt.axes(projection='3d')

z = np.linspace(0, 15, 1000)
x = np.sin(z)
y = np.cos(z)

ax.plot3D(x, y, z, 'r')

plt.show()

ax = plt.axes(projection='3d')

z = 15 * r.rand(100)
x = np.sin(z) + .1 * r.randn(100)
y = np.cos(z) + .1 * r.randn(100)

ax.scatter3D(x, y, z)

plt.show()

x = np.linspace(-6, 6, 30)
y = np.linspace(-6, 6, 30)

x, y = np.meshgrid(x, y)
z = np.sin(np.sqrt(x ** 2 + y ** 2))

ax = plt.axes(projection='3d')
ax.contour3D(x, y, z, 50)

ax.set_xlabel('x axis')
ax.set_ylabel('y axis')
ax.set_zlabel('z axis')

plt.show()

x = np.linspace(-6, 6, 30)
y = np.linspace(-6, 6, 30)

x, y = np.meshgrid(x, y)
z = np.sin(np.sqrt(x ** 2 + y ** 2))

ax = plt.axes(projection='3d')
ax.contour3D(x, y, z, 50, cmap='winter')

ax.set_xlabel('x axis')
ax.set_ylabel('y axis')
ax.set_zlabel('z axis')

ax.view_init(60, 60)

plt.show()

x = np.linspace(-6, 6, 30)
y = np.linspace(-6, 6, 30)

x, y = np.meshgrid(x, y)
z = np.sin(np.sqrt(x ** 2 + y ** 2))

ax = plt.axes(projection='3d')
ax.plot_wireframe(x, y, z)

ax.set_xlabel('x axis')
ax.set_ylabel('y axis')
ax.set_zlabel('z axis')

ax.view_init(60, 60)

plt.show()

x = np.linspace(-6, 6, 30)
y = np.linspace(-6, 6, 30)

x, y = np.meshgrid(x, y)
z = np.sin(np.sqrt(x ** 2 + y ** 2))

ax = plt.axes(projection='3d')
ax.plot_surface(x, y, z, cmap='plasma')

ax.set_xlabel('x axis')
ax.set_ylabel('y axis')
ax.set_zlabel('z axis')

ax.view_init(60, 60)

plt.show()

rd = np.linspace(0, 6, 30)
theta = np.linspace(-.9 * np.pi, .8 * np.pi, 40)
rd, theta = np.meshgrid(rd, theta)

x = rd * np.sin(theta)
y = rd * np.cos(theta)
z = np.sin(np.sqrt(x ** 2 + y ** 2))

ax = plt.axes(projection='3d')
ax.plot_surface(x, y, z, cmap='viridis')

ax.set_xlabel('x axis')
ax.set_ylabel('y axis')
ax.set_zlabel('z axis')

ax.view_init(60, -40)

plt.show()

rd = r.rand(666) * 6
theta = r.rand(666) * 2 * np.pi

x = np.ravel(rd * np.sin(theta))
y = np.ravel(rd * np.cos(theta))
z = np.sin(np.sqrt(x ** 2 + y ** 2))

ax = plt.axes(projection='3d')
ax.scatter(x, y, z, c=z, cmap='coolwarm', lw=1)

ax.set_xlabel('x axis')
ax.set_ylabel('y axis')
ax.set_zlabel('z axis')

ax.view_init(60, 60)

plt.show()

rd = r.rand(666) * 6
theta = r.rand(666) * 2 * np.pi

x = np.ravel(rd * np.sin(theta))
y = np.ravel(rd * np.cos(theta))
z = np.sin(np.sqrt(x ** 2 + y ** 2))

ax = plt.axes(projection='3d')
ax.plot_trisurf(x, y, z, cmap='coolwarm')

ax.set_xlabel('x axis')
ax.set_ylabel('y axis')
ax.set_zlabel('z axis')

ax.view_init(60, 60)

plt.show()

plt.style.use('classic')

data = r.multivariate_normal([0, 0], [[5, 2], [2, 2]], size=2000)
data = pd.DataFrame(data, columns=['X', 'Y'])

for c in 'XY':
    plt.hist(data[c], alpha=.5)

plt.show()

sns.set()

data = r.multivariate_normal([0, 0], [[5, 2], [2, 2]], size=2000)
data = pd.DataFrame(data, columns=['X', 'Y'])

for c in 'XY':
    plt.hist(data[c], alpha=.5)

plt.show()

data = r.multivariate_normal([0, 0], [[5, 2], [2, 2]], size=2000)
data = pd.DataFrame(data, columns=['X', 'Y'])

for c in 'XY':
    sns.kdeplot(data[c], shade=True)

plt.show()

data = r.multivariate_normal([0, 0], [[5, 2], [2, 2]], size=2000)
data = pd.DataFrame(data, columns=['X', 'Y'])

for c in 'XY':
    sns.distplot(data[c])

plt.show()

data = r.multivariate_normal([0, 0], [[5, 2], [2, 2]], size=2000)
data = pd.DataFrame(data, columns=['X', 'Y'])

sns.kdeplot(data.X, data.Y)

plt.show()

data = r.multivariate_normal([0, 0], [[5, 2], [2, 2]], size=2000)
data = pd.DataFrame(data, columns=['X', 'Y'])

with sns.axes_style('white'):
    sns.jointplot('X', 'Y', data, kind='kde')

plt.show()

data = r.multivariate_normal([0, 0], [[5, 2], [2, 2]], size=2000)
data = pd.DataFrame(data, columns=['X', 'Y'])

with sns.axes_style('white'):
    sns.jointplot('X', 'Y', data, kind='hex')

plt.show()

iris = sns.load_dataset('iris')

print(iris.head())

sns.pairplot(iris, hue='species')  #, height=4)
plt.show()

tips = sns.load_dataset('tips')

print(tips.head())

tips['tip_pct'] = tips.tip / tips.total_bill * 100
grid = sns.FacetGrid(tips, row='sex', col='time', margin_titles=True)
grid.map(plt.hist, 'tip_pct', bins=np.linspace(0, 40, 15))

plt.show()

g = sns.catplot('day', 'total_bill', 'sex', data=tips, kind='box')
g.set_axis_labels('Day', 'Total Bill')

plt.show()

with sns.axes_style('white'):
    sns.jointplot('total_bill', 'tip', data=tips, kind='hex')

plt.show()

planets = sns.load_dataset('planets')

print(planets.head())

g = sns.catplot('year', data=planets, kind='count', color='steelblue')
g.set_xticklabels(step=-5)

plt.show()

with sns.axes_style('white'):
    g = sns.catplot('year', data=planets, kind='count', aspect=2,
                    hue='method', order=range(2008, 2013))
    g.set_ylabels('Planets Discovered')

plt.show()
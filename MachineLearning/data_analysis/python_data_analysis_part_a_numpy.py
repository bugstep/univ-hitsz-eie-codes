# -*- coding: utf-8 -*-
"""Python_Data_Analysis_Part_A_NumPy.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Dnmm5j3Nk5hDl6PpMtKQgOQTgiLYlMdi

# 基础环境
"""

import platform

print(' '.join(platform.linux_distribution()))
print('Python version:', platform.python_version())

import numpy as np

print('NumPy version:', np.__version__)

!/opt/bin/nvidia-smi

import builtins as __builtin__

def print(*args, **kwargs):
    return __builtin__.print(sep='', end='\n\n', *args, **kwargs)

def namestr(obj, namespace):
    return [name for name in namespace if namespace[name] is obj]

"""# 数据类型 数组基础"""

a1 = np.random.randint(100, size=10)
a2 = np.random.randint(100, size=(4, 6))
a3 = np.random.randint(100, size=(2, 5, 6))

for a in [a1, a2, a3]:
    print(sorted(namestr(a, globals()))[-1], ' = \n', a)
    print(f"dtype={a.dtype}, ndim={a.ndim}, shape={a.shape}, "
          f"size={a.size}, itemsize={a.itemsize}, nbytes={a.nbytes}\n")

b1 = np.empty(4)
b2 = np.zeros(10)
b3 = np.ones(10)
b4 = np.arange(1, 11)
b5 = np.arange(11, 21)

for b in [b1, b2, b3, b4]:
    print(sorted(namestr(b, globals()))[-1], ' = ', b)

print('a1 = ', a1)
print('a1[1]  = ', a1[1])
print('a1[-1] = ', a1[-1])

print('a2 = \n', a2)
print('a2[1]     = ', a2[1])
print('a2[-1]    = ', a2[-1])
print('a2[-1, :] = ', a2[-1, :])
print('a2[:, 1]  = ', a2[:, 1])
print('a2[-1, 3] = ', a2[-1, 3])

print('b5   = ', b5)
print('b5[2:]     = ', b5[2:])
print('b5[2:5]    = ', b5[2:5])
print('b5[2:5:2]  = ', b5[2:5:2])
print('b5[2::2]   = ', b5[2::2])
print('b5[:-5:-1] = ', b5[:-5:-1])

print('a2 = \n', a2)
print('a2[1:3, 1:3] = \n', a2[1:3, 1:3])
print('a2[::-1, 1] = \n', a2[::-1, 1])
print('a2[::-1, ::-1] = \n', a2[::-1, ::-1])

b5a = b5[::-1]
b5b = b5a[:5].copy()

for b in [b5a, b5b]:
    print(sorted(namestr(b, globals()))[-1], ' = ', b)

b5a[3] = 7
b5b[2] = 8

for b in [b5a, b5b, b5]:
    print(sorted(namestr(b, globals()))[-1], ' = ', b)

print('b4 = \n', b4)

b4 = b4.reshape(2, 5)
print('b4 = \n', b4)

b4 = b4.flatten()

b4a = b4[np.newaxis, :]
b4b = b4[:, np.newaxis]

for b in [b4, b4a, b4b]:
    print(sorted(namestr(b, globals()))[-1], ' =   ', 
          b.shape, '\n', b)

c1 = np.arange(10)
c2 = np.arange(5, 10)

c3 = np.concatenate([c1, c2])
c4 = np.concatenate([c1, c3, c2])

c5 = np.concatenate([c1.reshape(2, 5), c2[np.newaxis]])  # axis=0)
c6 = np.concatenate([c1.reshape(5, 2), c2[:, np.newaxis]], axis=1)

c7 = np.vstack([c1.reshape(2, 5), c2[np.newaxis, :]])
c8 = np.hstack([c1.reshape(5, 2), c2[:, np.newaxis]])

for c in [c1, c2, c3, c4]:
    print(sorted(namestr(c, globals()))[-1], ' = ', c)

for c in [c5, c6, c7, c8]:
    print(sorted(namestr(c, globals()))[-1], ' = \n', c)

d1 = np.arange(54).reshape(6, 9)

d2, d3 = np.split(d1, [2])
d4, d5, d6 = np.split(d1, [2, 4])

d7, d8 = np.split(d1, [4], axis=1)

for d in [d1, d2, d3, d4, d5, d6, d7, d8]:
    print(sorted(namestr(d, globals()))[-1], ' = \n', d)

d9, d10, d11 = np.vsplit(d1, [2, 4])
d12, d13 = np.hsplit(d1, [4])

for d in [d1, d9, d10, d11, d12, d13]:
    print(sorted(namestr(d, globals()))[-1], ' = \n', d)

"""# 通用函数数组运算"""

e1 = np.arange(20).reshape(4, 5)

print('e1 = \n', e1)
print('e1 + 3 = \n', e1 + 3)
print('e1 * 2 = \n', e1 * 2)
print('e1 / 2 = \n', e1 / 2)
print('e1 // 2 = \n', e1 // 2)
print('e1 ** 2 = \n', e1 ** 2)
print('- e1 = \n', - e1)
print('e1 % 3 = \n', e1 % 3)

e2 = np.arange(-4, 4)
e3 = np.array([2 + 3j, 3 - 4j, -4 + 5j])

print('e2 = ', e2)
print('e3 = ', e3)
print('abs(e2) = ', abs(e2))
print('abs(e3) = ', abs(e3))

e4 = np.linspace(0, np.pi, 5)[:4]

print('e4      = ', e4)
print('sin(e4) = ', np.sin(e4))
print('cos(e4) = ', np.cos(e4))
print('tan(e4) = ', np.tan(e4))
print('atg(e4) = ', np.arctan(e4))

print('e1 = \n', e1)
print(f'e1 <= 10   < {np.count_nonzero(e1 <= 10)} >\n', e1 <= 10)
print(f'e1 == 10   < {np.count_nonzero(e1 == 10)} >\n', e1 == 10)
print(np.any(e1 > 20), ', ', np.any(e1 > 10), ', ', np.all(e1 > 10))

e5 = np.arange(10)
print('e5 = ', e5)

print(f'AND  e5 & 3 (0b11)\n', e5 & 3)
print(f'OR   e5 | 3 (0b11)\n', e5 | 3)
print(f'XOR  e5 ^ 3 (0b11)\n', e5 ^ 3)
print(f'NOT  ~ e5\n', ~ e5)

print(f'e1 % 3 == 0 | e1 % 5 == 0\n', (e1 % 3 == 0) | (e1 % 5 == 0))

e6 = e1[e1 % 4 == 0]

print(f'e1 =   {e1.shape}\n', e1)
print(f'e6 =   {e6.shape}\n', e6)

f1 = np.arange(1, 7)
f2 = np.zeros(12)
f3 = np.empty(6)
f4 = np.multiply(f1, 3, out=f2[::2])
f5 = np.bitwise_and(f1, 3, out=f3)

for f in [f1, f2, f3, f4, f5]:
    print(sorted(namestr(f, globals()))[-1], ' = ', f)

f6 = np.arange(1, 5)
f7 = np.arange(5, 10)

f8 = np.multiply.outer(f6, f7)

for f in [f6, f7, f8]:
    print(sorted(namestr(f, globals()))[-1], ' = \n', f)

"""# 聚合 广播规则"""

g1 = np.arange(11)

print('g1 = ', g1)

print(', '.join(str(x) for x in [g1.sum(), g1.prod(), g1.mean(), g1.std(), g1.var()]))
print(', '.join(str(x) for x in [g1.max(), g1.min(), g1.argmax(), g1.argmin(), g1.any(), g1.all()]))

print(', '.join(str(x) for x in [np.nansum(g1), np.nanmedian(g1), np.nanstd(g1), np.nanargmax(g1)]))

g2 = np.add.reduce(g1)
g3 = np.add.accumulate(g1)

for g in [g1, g2, g3]:
    print(sorted(namestr(g, globals()))[-1], ' = ', g)

g4 = np.arange(50).reshape(5, 10)

print('g4 = \n', g4)
print('g4.max() = ', g4.max())
print('g4.max(axis=1) = ', g4.max(axis=1))
print('g4.sum(axis=0) = ', g4.sum(axis=0))

h1 = np.zeros(5)
h2 = h1 + 4
h3 = np.arange(15).reshape(3, 5)
h4 = h2 + h3
h5 = np.arange(5)
h6 = np.arange(2, 7, 2)[:, None]
h7 = h5 + h6

for h in [h1, h2, h3, h4, h5, h6, h7]:
    print(sorted(namestr(h, globals()))[-1], ' = \n', h)

"""# 花哨的索引 数组的排序 结构化数组"""

i1 = np.arange(2, 15)

i2 = i1[[2, 7, 5, 10, 3, 4]]
i3 = i1[i2.reshape(2, 3)]

for i in [i1, i2, i3]:
    print(sorted(namestr(i, globals()))[-1], ' = \n', i)

i2[[1, 3]] = -1

for i in [i1, i2, i3]:
    print(sorted(namestr(i, globals()))[-1], ' = \n', i)

i4 = np.arange(40).reshape(4, 10)
i5r = np.array([0, 3, 1, 2])
i5c = np.array([3, 3, 6, 7])
i5 = i4[i5r, i5c]
i6 = i4[2, [3, 8, 5]]
i7 = i4[:2, [3, 8, 5]]
i8x = np.array([0, 0, 0, 1, 0, 0, 0, 0, 1, 0], dtype=bool)
i8 = i4[[1, 3], i8x]

for i in [i4, i5, i6, i7, i8]:
    print(sorted(namestr(i, globals()))[-1], ' = \n', i)

j1 = np.random.randint(100, size=(4, 6))

j2 = np.sort(j1)
j3 = np.sort(j1, axis=0)
j4 = np.argsort(j1)

for j in [j1, j2, j3, j4]:
    print(sorted(namestr(j, globals()))[-1], ' = \n', j)

j5 = np.partition(j1, 3)

j1.sort()

for j in [j1, j5]:
    print(sorted(namestr(j, globals()))[-1], ' = \n', j)

k1 = np.zeros(3, dtype={'names': ('name', 'age', 'height'),
                        'formats': ('U10', 'i4', 'f8')})

k1['name'] = ['Liam', 'Max', 'Hank']
k1['age'] = 22
k1['height'] = [188.8, 195, 177.7]

print('k1 = ', k1)
print('k1.dtype = ', k1.dtype)

print('k1 = ', k1)
print("k1[k1['height'] < 190] = ", k1[k1['height'] < 190])

k2x = np.dtype([('id', 'i8'), ('mat', 'f8', (4, 4))])

k2 = np.zeros(2, k2x)

print('k2 = \n', k2)
print('k2[0] = \n', k2[0])
print('k2.dtype = ', k2.dtype)
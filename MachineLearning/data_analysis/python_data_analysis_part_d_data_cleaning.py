# -*- coding: utf-8 -*-
"""Python_Data_Analysis_Part_D_Data_Cleaning.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1YXmlx5BBsJSw8vqax0qiF0PC1lKEcISr
"""

! rm /etc/localtime
! ln -s /usr/share/zoneinfo/Asia/Hong_Kong /etc/localtime
! dpkg-reconfigure tzdata

! sudo apt-get install screenfetch -q=2
! screenfetch

! sudo lsb_release -a
! echo
! /opt/bin/nvidia-smi

! pip install pymysql -q

import os
import platform

import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib as mpl
import matplotlib.pyplot as plt

import xlrd
import pymysql
import sqlalchemy
from sqlalchemy import create_engine

print('Python   version:', platform.python_version())
print('Numpy    version:', np.__version__)
print('Pandas   version:', pd.__version__)
print("Matplotlib ver'n:", mpl.__version__)
print('Seaborn  version:', sns.__version__)

print('xlrd     version:', xlrd.__VERSION__)
print('PyMySQL  version:', pymysql.__version__)
print("SQLAlchemy ver'n:", sqlalchemy.__version__)

sns.set()

from google.colab import drive
drive.mount('/gdrive')
file_path = '/gdrive/My Drive/Colab Files/'

"""# 数据清洗之常用工具"""

np.array([9, 5, 2, 7])

arr = np.array([9, 5, 2, 7], dtype='str')

arr

type(arr)

arr = np.array([[1,2,3], [4,5,6]])

arr

np.arange(1, 9, 1)

np.arange(1, 9, 2)

np.linspace(1, 10, 10)

np.linspace(1, 10, 10, endpoint=True)

np.linspace(1, 10, 10, endpoint=False)

np.zeros(4)

np.zeros((4, 5))

np.ones((4, 5))

arr

arr + 1

arr.ndim

arr.shape

arr.size

arr.dtype

data = [[1,3,5,7,9], [2,4,6,8,10], [1,2,3,4,5], [6,7,8,9,10]]

arr = np.array(data)

arr

arr[1]

arr[0:2]

arr[0, 2]

arr[0][2]

arr[:, 1:3]

arr[:][1:3]

arr = np.array([1,3,5,7,5,3,8,6,2,9])

arr

np.sort(arr)

arr

sorted(arr, reverse=True)

np.array(sorted(arr, reverse=True))

np.argsort(arr)

data = [[4,9,6,5,8], [2,5,8,6,4], [3,5,5,8,8], [9,8,5,1,5]]

arr = np.array(data)

arr

np.sort(arr)

np.sort(arr, axis=0)

arr

np.where(arr>4, arr, 0)

np.extract(arr>5, arr)



s = pd.Series(data)

type(s)

s

s = pd.Series([9, 8, 7, 6], 
              index=['a', 'b', 'c', 'd'], 
              name='This is a serie')

s

s = pd.Series({'Shenzhen':'SZX', 'Nanjing': 'NKG',
               'Dalian': 'DLC', 'Hong Kong': 'HKG'})

s

s[2]

s['Nanjing']

s[1:3]

s['Nanjing':'Hong Kong']

s.values

type(s.values)

s.index

pd.Series(data).index

s.ndim

s.shape

data = [['Alex', 23, 'M'], ['Ben', 19, 'M'], ['Cindy', 22, 'F']]

df = pd.DataFrame(data, columns=['Name', 'Age', 'Sex'])

df

df = pd.DataFrame({'Name':['Dean', 'Enna', 'Ford'], 
                   'B':[33, 34, 35], 'C':['M', 'F', 'M']})

df

arr = np.array(data)

arr

df = pd.DataFrame(arr, columns=['Name', 'Age', 'Sex'], index=['a', 'b', 'c'])

df

df.values

type(df.values)

df.columns

df.index

type(df.index)

df.index.tolist()

df.ndim

df.shape

arr = np.array(data)
df = pd.DataFrame(arr, columns=['Name', 'Age', 'Sex'])

df.dtypes

df = pd.DataFrame(data, columns=['Name', 'Age', 'Sex'])

df.dtypes

"""# 数据清洗之文件读写"""

os.getcwd()

os.chdir(file_path)

os.getcwd()

baby = pd.read_csv('csdn_sam_tianchi_mum_baby.csv') #, encoding='utf-8')

baby.head(5)

order = pd.read_csv('csdn_meal_order_info.csv', encoding='gbk')

order.info()

order = pd.read_csv('csdn_meal_order_info.csv', encoding='gbk',
                    dtype={'info_id':str, 'emp_id':str})

order.info()

order.head()

baby = pd.read_csv('csdn_baby_trade_history.csv', nrows=50)

baby

pd.set_option('display.max_columns', 20)

pd.set_option('display.max_rows', 50)

order.to_csv('csdn_meal_order_info_utf8.csv', encoding='utf-8', index=False)

df = pd.read_excel('csdn_meal_order_detail.xlsx', sheet_name='meal_order_detail2')

df.head(10)

df = pd.read_excel('csdn_meal_order_detail.xlsx', sheet_name=1)

df.head(10)

df.to_excel('csdn_meal_order_detail2.xlsx', index=False, sheet_name='detail2')

# conn = create_engine(f'mysql+pymysql://{user}:{password}@{host}:{port}/{database}')
# df = pd.read_sql(f'SELECT * FROM {table};', conn)
# df.to_sql('table_name', conn, index=False, if_exists='replace')

# conn = create_engine('mysql+pymysql://root:wdlinux.cn@106.52.50.36:3306/setup/')
# df = pd.read_sql('SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES', conn)

"""# 数据清洗之数据表处理"""

os.getcwd()

df = pd.read_csv('csdn_baby_trade_history.csv', dtype={'user_id': str})

df.info()

df.head(10)

df.columns

df['user_id']

df[['user_id', 'day']]

df[['user_id', 'day']][1: 5]

df.loc[3:5]

df.loc[:, ['user_id', 'day']].head()

df.loc[1:3, ['user_id', 'day']]

df.loc[df.user_id=='444069173']

df.loc[df.user_id=='444069173', ['user_id', 'day']]

df.loc[(df.user_id == '444069173') | (df.buy_mount > 1000), 
       ['user_id', 'buy_mount', 'day']]

df.loc[1:4]

df.iloc[1:4]

df.iloc[:, 2:4]

df.iloc[[9, 8, 5], [0, 2, 5]]

data = [['Alex', 23, 'M'], ['Ben', 19, 'M'], ['Cindy', 22, 'F']]
df = pd.DataFrame(data, columns=['Name', 'Age', 'Sex'], index=['a', 'b', 'c'])

df

df['Period'] = np.where(df.Age <= 19, 'teens', 'adult')

df

sex = df['Sex']
del df['Sex']
df.insert(1, 'Gender', sex)

df

df.drop(labels=['Age'], axis=1)

df

df.drop(labels=['Age'], axis=1, inplace=True)

df

df.drop(labels=['b', 'c'], axis=0)

df = pd.read_csv('csdn_sam_tianchi_mum_baby.csv', dtype=str)

df.info()

df.head(10)

df.gender == '0'

df[df.gender == '0']

df[(df.gender == '0')]

df.loc[df.gender == '0', 'gender'] = 'Female'

df.loc[df.gender == '1', 'gender'] = 'Male'

df.loc[df.gender == '2', 'gender'] = 'Unknown'

df.head(8)

df.rename(columns={'user_id': 'id', 'gender': 'sex'}, inplace=True)

df.head(8)

df.rename(index={3:4, 4:5, 5:3}, inplace=True)

df.head(8)

df.reset_index(drop=True, inplace=True)

df.head(8)

df = pd.read_csv('csdn_baby_trade_history.csv')

df[(df.buy_mount > 10) & (df.day > 20141212)]

df.day.between(20141201, 20141231, inclusive=True)

df[df.day.between(20141201, 20141231, inclusive=True)]

df.cat1.isin([28, 38])

df[df.cat1.isin([28, 38])]

workbook = xlrd.open_workbook('csdn_meal_order_detail.xlsx')

sheet_name = workbook.sheet_names()

sheet_name

order1 = pd.read_excel('csdn_meal_order_detail.xlsx', 
                       sheet_name='meal_order_detail1')

order2 = pd.read_excel('csdn_meal_order_detail.xlsx', 
                       sheet_name='meal_order_detail2')

order3 = pd.read_excel('csdn_meal_order_detail.xlsx', 
                       sheet_name='meal_order_detail3')

order = pd.concat([order1, order2, order3], axis=0)

order

order.reset_index()

order = pd.concat([order1, order2, order3], axis=0, ignore_index=True)

order

order = pd.DataFrame()

for i in sheet_name:
    sheet = pd.read_excel('csdn_meal_order_detail.xlsx', sheet_name=i)
    order = pd.concat([order, sheet], axis=0, ignore_index=True)

order

baby = pd.read_csv('csdn_baby_trade_history.csv', dtype={'user_id': str})

mom = pd.read_csv('csdn_sam_tianchi_mum_baby.csv', dtype={'user_id': str})

baby.head()

mom.head()

df = pd.merge(left=baby, right=mom, how='inner', 
              left_on='user_id', right_on='user_id')

df[['user_id', 'gender', 'birthday', 'day']].head(8)

df = pd.read_csv('csdn_baby_trade_history.csv', 
                 dtype={'user_id': str}, index_col=[3, 1])

df

df.loc[28]

df.loc[28].loc[[10368360710, 20177445814]]

df.loc[(28, [10368360710, 20177445814]), :]

df.loc[(28, [10368360710, 20177445814]), ['user_id', 'day']]

df.loc[([28, 38])]

"""# 数据清洗之数据转换"""

os.getcwd()

df = pd.read_csv('csdn_baby_trade_history.csv', dtype={'user_id': str})

df.head()

df.info()

df['date'] = pd.to_datetime(df.day, format='%Y%m%d', errors='coerce')

df.info()

df.head()

df.date.dt.year

df['time'] = pd.datetime.now() - df.date

df.info()

df.head()

df.time.dt.days[:5]

df.time.dt.seconds[:5]

df.time.dt.microseconds[:5]

df['hours'] = df.time / pd.Timedelta('1H')

df['hours'][:5]

df.hours.round(2).head()

df.time.astype('timedelta64[M]').head()

df = pd.read_csv('csdn_sam_tianchi_mum_baby.csv', dtype=str)

df.head()

def g(x):
    if '0' in x:
        fg = 'Female'
    elif '1' in x:
        fg = 'Male'
    else:
        fg = 'Unknown'
    return fg

df['gndr'] = df.gender.apply(g)

df.head()

df['sex'] = df.gender.map({'0':'F', '1':'M', '2':'U'})

df.head()

df['s'] = df.gender.map(g)

df.head()

df.birthday.apply(lambda x: x[:4])

df.user_id.apply(lambda x: str(x).replace(x[1: -1], '*' * len(x[1: -1])))

df = pd.read_csv('csdn_MotorcycleData.csv', encoding='gbk')

df.head()

df.info()

df.Price.head()

df.Price = df.Price.str.strip('$')

df.Price.head()

df.Price = df.Price.str.replace(',', '')

df.Price.head()

df.Price = df.Price.astype(int)

df.Price.head()

df.info()

df.Location.str.split(', ')

df.Location.str.split(', ').str[1]

df.Location.str.split(', ').str[1].str.len()

"""# 数据清洗之数据统计"""

df = pd.read_csv('csdn_online_order.csv', encoding='gbk', 
                 dtype={'customer': str, 'order': str})

df.head()

group = df.groupby('weekday')

type(group)

group.mean()

group.mean()['discount%']

group = df.groupby(['customer', 'weekday'])

group.sum().total_items

group = df.groupby('weekday')

group

group.max()

group.agg([np.min, np.mean, np.max])

group.agg({'total_items': np.sum, 
           'discount%': [np.mean, np.median]})

df.columns

df[['Food%', 'Fresh%', 'Drinks%']].agg([min, np.mean, max])

group = df.groupby('weekday')

group.apply(np.mean)

group.apply(np.mean)[['Food%', 'Fresh%', 'Drinks%']]

d = df[df.columns[6:]]

d

d.apply(np.mean, axis=0)

d.apply(np.sum, axis=1)

d.apply(lambda x: x[0] - x[1], axis=1)

pd.pivot_table(data=df, index='weekday', values='total_items',
               aggfunc=[np.mean, np.sum], margins=True, margins_name='SUM')

pd.pivot_table(data=df, index='weekday', columns='customer', values='total_items',
               aggfunc=[np.mean, np.sum], margins=True, margins_name='SUM')

pd.pivot_table(data=df, index='weekday', columns='customer', values='total_items',
               aggfunc=[np.mean, np.sum], margins=True, margins_name='SUM', fill_value=0)

pd.crosstab(index=df['weekday'], columns=df['discount%'])

pd.crosstab(index=df['weekday'], columns=df['discount%'], margins=True, normalize='all')

pd.crosstab(index=df['weekday'], columns=df['discount%'], margins=True, normalize='index')

pd.crosstab(index=df['weekday'], columns=df['discount%'], margins=True, normalize='columns')

"""# 数据清洗之数据预处理"""

os.getcwd()

df = pd.read_csv('csdn_MotorcycleData.csv', encoding='gbk')

df.head()

df = pd.read_csv('csdn_MotorcycleData.csv', encoding='gbk', na_values='Used')

df.head()

df = pd.read_csv('csdn_MotorcycleData.csv', encoding='gbk', na_values='Na')

df.head()

def func(x):
    if '$' in str(x):
        x = str(x).strip('$').replace(',', '')
    else:
        x = str(x).replace(',', '')
    return float(x)

df['Price'] = df.Price.apply(func)

df['Mileage'] = df.Mileage.apply(func)

df.head()

df.info()

df.duplicated()

any(df.duplicated())

df[df.duplicated()]

df.drop_duplicates()

df.columns

df.shape

df.drop_duplicates(subset=['Condition', 'Condition_Desc', 'Price', 'Location'], inplace=True)

df.shape

df.apply(lambda x: sum(x.isnull()) / len(x), axis=0)

df.dropna()

df.shape

df.dropna(how='any').shape

df.dropna(how='all').shape

df.dropna(how='any', subset=['Condition', 'Price', 'Mileage']).shape

df[['Exterior_Color', 'Mileage']][12:17]

df.Mileage.median()

df.Mileage.fillna(df.Mileage.median()).shape

df[df.Exterior_Color.isnull()].shape

df.Exterior_Color.mode()

df.Exterior_Color.fillna(df.Exterior_Color.mode()[0]).shape

df[['Exterior_Color', 'Mileage']][12:17]

df.fillna(value=({'Exterior_Color': 'Black', 'Mileage': 6869.0}))[['Exterior_Color', 'Mileage']][12:17]

df.fillna(method='ffill')[['Exterior_Color', 'Mileage']][12:17]

df.fillna(method='bfill')[['Exterior_Color', 'Mileage']][12:17]

x_bar = df.Price.mean()

x_std = df.Price.std()

any(df.Price > x_bar + 2 * x_std)

any(df.Price < x_bar - 2 * x_std)

df.Price.describe()

q1 = df.Price.quantile(.25)

q3 = df.Price.quantile(.75)

iqr = q3 - q1

any(df.Price > q3 + 1.5 * iqr)

any(df.Price < q1 - 1.5 * iqr)

df.Price.plot(kind='box')

df.Price.plot(kind='hist', bins=30, density=True)
df.Price.plot(kind='kde')

p01 = df.Price.quantile(.01)

p99 = df.Price.quantile(.99)

df['Price_M'] = df['Price']

df.loc[df.Price < p01, 'Price_M'] = p01

df.loc[df.Price > p99, 'Price_M'] = p99

df[['Price', 'Price_M']].describe()

df.Price_M.plot(kind='box')

df['Price_bin'] = pd.cut(df.Price_M, 5, labels=range(5))

df[['Price_M', 'Price_bin']]

df.Price_bin.value_counts()

df.Price_bin.value_counts().plot(kind='bar')

c = [100, 1000, 5000, 10000, 20000, 100000]

df['Price_bin'] = pd.cut(df.Price_M, bins=c, labels=range(5))

df[['Price_M', 'Price_bin']]

df.Price_bin.hist()

np.linspace(0, 1, 6)

df['Price_bin'] = pd.qcut(df.Price_M, q=np.linspace(0, 1, 6), labels=range(5))

df.Price_bin.hist()

df.Price_M.quantile(np.linspace(0, 1, 6))
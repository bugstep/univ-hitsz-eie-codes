# -*- coding: utf-8 -*-
"""Python_Data_Analysis_Part_B_Pandas.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1py4EMp9XUSLFRpaFgHNkdqaU2D1PNJTY

# 基础环境
"""

import datetime, pytz

timezone = pytz.timezone('Asia/Hong_Kong')
now = datetime.datetime.now(tz=timezone)
print(now.isoformat())

import platform

print(' '.join(platform.linux_distribution()))
print('Python version:', platform.python_version())

import numpy as np
import pandas as pd
import seaborn as sns

print('Numpy   version:', np.__version__)
print('Pandas  version:', pd.__version__)
print('Seaborn version:', sns.__version__)

!/opt/bin/nvidia-smi

import builtins as __builtin__

def print(*args, **kwargs):
    return __builtin__.print(sep='', end='\n\n', *args, **kwargs)

"""# Series DataFrame Index"""

a1 = pd.Series([5, 6, 7, 8])

print('a1 = \n', a1)
print('a1.values = ', a1.values, 
      '              ', type(a1.values))
print('a1.index  = ', a1.index, 
      '\n            ', type(a1.index))

a2 = pd.Series([5, 6, 7, 8], index=[9, 8, 7, 6])

print('a2 = \n', a2)
print('a2.values = ', a2.values)
print('a2.index  = ', a2.index)

a3d = {'a': 65, 'b': 66, 'c': 67}
a3 = pd.Series(a3d)

print('a3 = \n', a3)
print('a3.values = ', a3.values)
print('a3.index  = ', a3.index)

a4d = {1: 'a', 3: 'b', 5: 'c', 2: 'd', 4: 'e'}
a4 = pd.Series(a4d, index=[1, 4, 5])

print('a4 = \n', a4)
print('a4.values = ', a4.values)
print('a4.index  = ', a4.index)

a5 = pd.Series([11, 22, 33, 44, 55], 
               index=[2, 3, 4, 5, 6])

print('a5 = \n', a5)
print('a5[3] = ', a5[3])
print('a5[:3] = \n', a5[:3])
print('a5[:9] = \n', a5[:9])

a6 = pd.Series([11, 22, 33, 44, 55], 
               index=[1, 9, 5, 6, 3])

print('a6 = \n', a6)
print('a6[3] = ', a6[3])
print('a6[1:3] = \n', a6[1:3])

a7d = {'a': 65, 'b': 66, 'd': 68, 'c': 67}
a7 = pd.Series(a7d)

print('a7 = \n', a7)
print("a7['c'] = ", a7['c'])
print("a7['b':'c'] = \n", a7['b':'c'])

a8 = pd.Series([10, 11, 12, 13, 14], 
               index=[2, 3, 4, 5, 6])

print('a8 = \n', a8)

print('a8.loc[3]  = ', a8.loc[3])
print('a8.iloc[3] = ', a8.iloc[3])

print('a8.loc[2:4] = \n', a8.loc[2:4])
print('a8.iloc[2:4] = \n', a8.iloc[2:4])

b1s = pd.Series([11, 22, 33, 44, 55], 
                index=[1, 9, 5, 6, 3])

b1 = pd.DataFrame(b1s, columns=['numbers'])
print('b1 = \n', b1)

b2d = [{'a': 2, 'b': 8}, 
       {'c': 4, 'b': 1}, 
       {'a': 2, 'd': 8}]

b2 = pd.DataFrame(b2d)
print('b2 = \n', b2)

b3a = pd.Series([1, 3, 5], index=[1, 3, 4])
b3b = pd.Series([2, 4, 6], index=[1, 4, 6])

b3 = pd.DataFrame({'A': b3a, 'B': b3b})

print('b3a = \n', b3a)
print('b3b = \n', b3b)
print('b3 = \n', b3)

b4 = pd.DataFrame(np.zeros((4, 5)),
                  index=['a', 'b', 'c', 'd'],
                  columns=['A', 'B', 'C', 'D', 'E'])

print('b4 = \n', b4)

print('b4.C = \n', b4.C)
print("b4['C'] = \n", b4['C'])

b5n = np.ones(3, dtype=[('int', 'i8'), ('float', 'f8')])
b5 = pd.DataFrame(b5n)

print('b5 = \n', b5)

print("b5.loc[:1, 'float'] = \n", b5.loc[:1, :'float'])
print('b5.iloc[:1, :1] = \n', b5.iloc[:1, :1])

print('b5.values = \n', b5.values)

c1 = pd.Index([1, 3, 5, 7, 9])

print('c1 = ', c1)
print('c1[:2]   = ', c1[:2])
print('c1.size  = ', c1.size)
print('c1.shape = ', c1.shape)
print('c1.ndim  = ', c1.ndim)
print('c1.dtype = ', c1.dtype)

c2 = pd.Index([1, 2, 3, 4, 5])

print('c1 = ', c1)
print('c2 = ', c2)

print('c1 & c2 = ', c1 & c2)
print('c1 | c2 = ', c1 | c2)
print('c1 ^ c2 = ', c1 ^ c2)

"""# 运算和缺失值"""

d1 = pd.DataFrame(np.random.randint(10, size=(3, 6)),
                  columns=['A', 'B', 'C', 'D', 'E', 'F'])
d2 = np.square(d1)

print('d1 = \n', d1)
print('d2 = \n', d2)

d3 = pd.DataFrame(np.random.randint(10, size=4), index=[1, 2, 4, 5])
d4 = pd.DataFrame(np.random.randint(10, size=4), index=[1, 3, 4, 6])

print('d3 = \n', d3)
print('d4 = \n', d4)

print('d3 + d4 = \n', d3 + d4)
print('d3 + d4 = \n', d3.add(d4, fill_value=100))

d5 = pd.DataFrame(np.random.randint(10, size=(4, 3)), 
                  index=[1, 2, 4, 5], columns=['A', 'B', 'C'])
d6 = pd.DataFrame(np.random.randint(10, size=(4, 3)), 
                  index=[1, 3, 4, 2], columns=['B', 'C', 'D'])

print('d5 = \n', d5)
print('d6 = \n', d6)

print('d5 + d6 = \n', d5 + d6)
print('d5 + d6 = \n', d5.add(d6, fill_value=100))

d7n = np.random.randint(10, size=(4, 6))

print('d7n = \n', d7n)
print('d7n - d7n[0] = \n', d7n - d7n[0])

d7 = pd.DataFrame(d7n)

d8 = d7 - d7.iloc[0]
d9 = d7.subtract(d7[0], axis=0)

print('d7 = \n', d7)
print('d8 = \n', d8)
print('d9 = \n', d9)

e1 = np.array([1, 2, 3, np.nan, 5])

print('e1 = ', e1)

print('np.max(e1) = ', np.max(e1))
print('np.min(e1) = ', np.min(e1))
print('np.sum(e1) = ', np.sum(e1))

print('np.nanmax(e1) = ', np.nanmax(e1))
print('np.nanmin(e1) = ', np.nanmin(e1))
print('np.nansum(e1) = ', np.nansum(e1))

e2 = pd.Series([1, 'b', np.nan, 4, None])

print('e2 = \n', e2)

print('e2.isnull() = \n', e2.isnull())
print('e2.notnull() = \n', e2.notnull())
print('e2[e2.notnull()] = \n', e2[e2.notnull()])

e3n = np.array([[1, 2, 3, 4, 5],
                [2, np.nan, 6, np.nan, np.nan],
                [3, np.nan, 9, 12, 15],
                [4, np.nan, 12, 16, 20],
                [5, 10, np.nan, 20, np.nan]])
e3 = pd.DataFrame(e3n)

print('e3 = \n', e3)

print('e3.dropna() = \n', e3.dropna())
print('e3.dropna(axis=1, thresh=4) = \n', e3.dropna(axis=1, thresh=4))

print('e3.fillna(0) =\n', e3.fillna(0))
print("e3.fillna(method='ffill') = \n", e3.fillna(method='ffill'))
print("e3.fillna(method='bfill', axis=1) = \n", e3.fillna(method='bfill', axis=1))

"""# 多级索引"""

f1i = [(1, 'English'), (1, 'Spanish'),
       (2, 'English'), (2, 'Spanish'),
       (3, 'English'), (3, 'Spanish'),
       (4, 'English'), (4, 'Spanish')]
f1d = ['one', 'uno', 'two', 'dos', 'three', 'tres', 'four', 'cuatro']

f1 = pd.Series(f1d, index=f1i)

print('f1 = \n', f1)

print("f1[(1, 'Spanish')] = ", f1[(1, 'Spanish')])

print("f1[(1, 'English'):(2, 'English')] = \n", 
      f1[(1, 'English'):(2, 'English')])

f2m = pd.MultiIndex.from_tuples(f1i)
f2 = pd.Series(f1d, index=f2m)

print('f2m = \n', f2m)
print('f2 = \n', f2)

print("f2[2, 'English'] = ", f2[2, 'English'])

f3i = [[1, 1, 2, 2, 3, 3, 4, 4],
       ['English', 'Spanish', 'English', 'Spanish', 
        'English', 'Spanish', 'English', 'Spanish']]

f3 = pd.DataFrame(f1d, index=f3i, columns=['Translation'])
print('f3 = \n', f3)

f2d1 = f2.unstack()
f2d2 = f2.unstack(level=0)
f3s1 = f3.stack()

print('f2d1 = \n', f2d1)
print('f2d2 = \n', f2d2)
print('f3s1 = \n', f3s1)

f2r1 = f2.reset_index()
f2r3 = f2.reset_index(drop=True)

f2r2 = f2r1.set_index(['level_0'])

print('f2r1 = \n', f2r1)
print('f2r2 = \n', f2r2)
print('f2r3 = \n', f2r3)

f4m1 = pd.MultiIndex.from_arrays([list('AAABBBCCC'), 
                                 [1, 2, 3, 1, 2, 3, 1, 2, 3]])
f4m2 = pd.MultiIndex.from_tuples([('A', 1), ('A', 2), ('A', 3),
                                  ('B', 1), ('B', 2), ('B', 3),
                                  ('C', 1), ('C', 2), ('C', 3),])
f4m3 = pd.MultiIndex.from_product([['A', 'B', 'C'], [1, 2, 3]])

f4m3.names = ['3-1', '3-2']

print('f4m1 = \n', f4m1)
print('f4m2 = \n', f4m2)
print('f4m3 = \n', f4m3)

f4r = pd.MultiIndex.from_product([['I', 'II', 'III'], ['i', 'ii']])
f4c = pd.MultiIndex.from_product([['A', 'B', 'C'], ['a', 'b', 'c']])

f4d = np.arange(1, 55).reshape(6, 9)

f4 = pd.DataFrame(f4d, index=f4r, columns=f4c)
print('f4 = \n', f4)

print("f4['B'] = \n", f4['B'])
print("f4['B', 'b'] = \n", f4['B', 'b'])
print("f4['B', 'b']['I', 'i'] = ", f4['B', 'b']['I', 'i'])

print("f4.loc[pd.IndexSlice[:, 'ii'],\n"
      "       pd.IndexSlice['B', :]] = \n", 
      f4.loc[pd.IndexSlice[:, 'ii'], pd.IndexSlice['B', :]])

f5d = np.arange(11, 100, 11)
f5m = pd.MultiIndex.from_product([['A', 'B', 'C'], [1, 2, 3]])

f5 = pd.Series(f5d, index=f5m)
print('f5 = \n', f5)

print('f5[f5 < 50] = \n', f5[f5 < 50])
print("f5[['A', 'C']].loc[:, 2] = \n", f5[['A', 'C']].loc[:, 2])

f6i = [[4, 4, 1, 1, 3, 3, 2, 2],
       ['B', 'A', 'B', 'A', 'B', 'A', 'B', 'A']]

f6 = pd.DataFrame(f1d, index=f6i, columns=['demo'])
print('f6 = \n', f6)

f7 = f6.sort_index()
print('f7 = \n', f7)

f8r = pd.MultiIndex.from_product([['I', 'II', 'III'], ['i', 'ii']],
                                 names=['Row_1', 'Row_2'])
f8c = pd.MultiIndex.from_product([['A', 'B', 'C'], ['a', 'b', 'c']],
                                 names=['Col_1', 'Col_2'])
f8d = np.arange(1, 55).reshape(6, 9)

f8 = pd.DataFrame(f8d, index=f8r, columns=f8c)
print('f8 = \n', f8)

print("f8.sum() = \n", f8.sum())
print("f8.sum(level='Row_1') = \n", f8.sum(level='Row_1'))
print("f8.sum(level='Row_2') = \n", f8.sum(level='Row_2'))
print("f8.sum(level='Col_1', axis=1) = \n", f8.sum(level='Col_1', axis=1))
print("f8.sum(level='Col_2', axis=1) = \n", f8.sum(level='Col_2', axis=1))

"""# 数据合并"""

def df(column, index):
    data = {c:[f'{c}{r}' for r in index] for c in column}
    return pd.DataFrame(data, index)

g1a = pd.Series(['A', 'B', 'C'], index=[1, 2, 3])
g1b = pd.Series(['D', 'E', 'F'], index=[4, 5, 6])

g1 = pd.concat([g1a, g1b])

print('g1a = \n', g1a)
print('g1b = \n', g1b)
print('g1 = \n', g1)

g2a = df('ABC', [1, 2, 3])
g2b = df('BCD', [3, 4, 5])

g2c = pd.concat([g2a, g2b], sort=False)
g2d = pd.concat([g2a, g2b], sort=False, axis=1)

print('g2a = \n', g2a)
print('g2b = \n', g2b)
print('g2c = \n', g2c)
print('g2d = \n', g2d)

try:
    g2d = pd.concat([g2a, g2b], sort=False, axis=1, verify_integrity=True)
except ValueError as err:
    print(err)

g2e = pd.concat([g2a, g2b], sort=False, axis=1, ignore_index=True)
g2f = pd.concat([g2a, g2b], sort=False, axis=1, keys=['g2a_part', 'g2b_part'])

print('g2e = \n', g2e)
print('g2f = \n', g2f)

g2g = pd.concat([g2a, g2b], join='inner')
g2h = pd.concat([g2a, g2b.reindex(columns=g2a.columns)])

g2i = g2a.append(g2b, sort=False)

print('g2c = \n', g2c)
print('g2g = \n', g2g)
print('g2h = \n', g2h)
print('g2i = \n', g2i)

h1a = pd.DataFrame({'name': ['Alex', 'Bill', 'Cruz', 'Dean'],
                    'group': ['I', 'II', 'III', 'II']})
h1b = pd.DataFrame({'name': ['Alex', 'Bill', 'Cruz', 'Dean'],
                    'score': [66, 77, 88, 99]})
h1c = pd.DataFrame({'group': ['I', 'II', 'III'],
                    'leader': ['Liam', 'Max', 'Hank']})
h1d = pd.DataFrame({'group': ['I', 'I', 'II', 'II', 'II', 'III', 'III'],
                    'subject': ['1.001', '1.003', '2.001', '2.002', '2.016', '3.002', '3.008']})

print('h1a = \n', h1a)
print('h1b = \n', h1b)
print('h1c = \n', h1c)
print('h1d = \n', h1d)

h2a = pd.merge(h1a, h1b)
h2b = pd.merge(h1a, h1c)
h2c = pd.merge(h1a, h1d)

print('h2a = \n', h2a)
print('h2b = \n', h2b)
print('h2c = \n', h2c)

h3a = pd.merge(h2a, h2c, on='name')
h3b = pd.merge(h2a, h2c, on='group')

print('h3a = \n', h3a)
print('h3b = \n', h3b)

h4a = pd.DataFrame({'name': ['Alex', 'Bill', 'Cruz', 'Dean'],
                    'group': ['I', 'II', 'III', 'II']})
h4b = pd.DataFrame({'names': ['Alex', 'Dean', 'Bill', 'Cruz'],
                    'score': [66, 77, 88, 99]})

h4 = pd.merge(h4a, h4b, left_index=True, right_index=True)
h5 = pd.merge(h4a, h4b, left_on='name', right_on='names')

print('h4a = \n', h4a)
print('h4b = \n', h4b)

print('h4 = \n', h4)
print('h5 = \n', h5)
print("h5.drop('names', axis=1) = \n", h5.drop('names', axis=1))

h6a = pd.DataFrame({'name': ['Alex', 'Bill', 'Cruz', 'Dean', 'Eric'],
                    'age': [21, 19, 18, 22, 19]})
h6b = pd.DataFrame({'name': ['Cruz', 'Dean', 'Eric', 'Ford', 'Grey'],
                    'grade': ['A', 'C', 'A', 'A', 'B']})

h6 = pd.merge(h6a, h6b)
h7a = pd.merge(h6a, h6b, how='inner')
h7b = pd.merge(h6a, h6b, how='outer')
h7c = pd.merge(h6a, h6b, how='left')
h7d = pd.merge(h6a, h6b, how='right')

print('h6a = \n', h6a)
print('h6b = \n', h6b)
print('h6 = \n', h6)

print('h7a = \n', h7a)
print('h7b = \n', h7b)
print('h7c = \n', h7c)
print('h7d = \n', h7d)

h8a = pd.DataFrame({'name': ['Alex', 'Bill', 'Cruz', 'Dean', 'Eric'],
                    'score': [99, 84, 95, 77, 91]})
h8b = pd.DataFrame({'name': ['Cruz', 'Dean', 'Eric', 'Ford', 'Grey'],
                    'score': [88, 65, 95, 79, 83]})

h8c = pd.merge(h8a, h8b, on='name')
h8d = pd.merge(h8a, h8b, on='name', suffixes=['_midterm', '_final'])

print('h8a = \n', h8a)
print('h8b = \n', h8b)

print('h8c = \n', h8c)
print('h8d = \n', h8d)

"""# 累计和分组"""

i = sns.load_dataset('planets')

print(i.shape, '\n', i.head())

i1a = i.describe()
i1b = i.dropna().describe()

print(i1a)
print(i1b)

i2d = pd.DataFrame({'name': ['Alex', 'Bill', 'Cruz', 'Alex', 'Bill', 'Cruz'],
                    'score': [99, 84, 95, 94, 77, 91]})

i2 = i2d.groupby('name').mean()

print('i2d = \n', i2d)
print('i2 = \n', i2)

print(i.groupby('mass'))
print(i.groupby('mass')['year'])
print(i.groupby('mass').mean())
print(i.groupby('method')['distance'].median())

for (method, group) in i.groupby('method'):
    __builtin__.print(method, group.shape)

i3 = i.groupby('method')['year'].describe().unstack()

print(i3)

j1 = pd.DataFrame({'key': list('ABCABC'),
                   'x': range(1, 7),
                   'y': [9, 2, 6, 8, 7, 4]})

j1a = j1.groupby('key').aggregate(['min', np.median, np.max])
j1b = j1.groupby('key').aggregate({'x': ['min', np.median], 'y':'max'})

print('j1 = \n', j1)
print('j1a = \n', j1a)
print('j1b = \n', j1b)

j2s = j1.groupby('key').std()
j2 = j1.groupby('key').filter(lambda z: z['y'].std() < 1.5)

print('j1 = \n', j1)
print('j2s = \n', j2s)
print('j2 = \n', j2)

j3 = j1.groupby('key').transform(lambda z: z - z.mean())

print('j1 = \n', j1)
print('j3 = \n', j3)

def normalize_y(z):
    z['y'] = z['y'] / z['y'].sum()
    return z

j4 = j1.groupby('key').apply(normalize_y)

print('j1 = \n', j1)
print('j4 = \n', j4)

j5l = [0, 2, 1, 1, 0, 1]
j5m = {'A': 'alpha', 'B': 'bravo', 'C': 'charlie'}

j5a = j1.groupby(j5l).sum()
j5b = j1.groupby(j1['key']).sum()

j5c = j1.set_index('key').groupby(j5m).sum()
j5d = j1.set_index('key').groupby(str.lower).sum()
j5e = j1.set_index('key').groupby([str.lower, j5m]).sum()

print('j1 = \n', j1)
print('j5a = \n', j5a)
print('j5b = \n', j5b)
print('j5c = \n', j5c)
print('j5d = \n', j5d)
print('j5e = \n', j5e)

"""# 透视表 字符串向量化 时间序列"""

k = sns.load_dataset('titanic')

print(k.shape, '\n', k.head())

k1 = k.groupby('sex')[['survived']].mean()
k2 = k.groupby(['sex', 'class'])['survived'].aggregate('mean').unstack()

print('k1 = \n', k1)
print('k2 = \n', k2)

k3 = k.pivot_table('survived', index='sex', columns='class')

k4c = pd.cut(k['age'], [0, 18, 48, 80])
k4 = k.pivot_table('survived', index=['sex', k4c], columns='class')

k5c = pd.qcut(k['age'], 3)
k5 = k.pivot_table('survived', index=['sex', k5c], columns=['class', 'alone'])

print('k3 = \n', k3)
print('k4 = \n', k4)
print('k5 = \n', k5)

k6 = pd.Series(['ALPHA', 'BRAVO', None, 'DELTA', 'ECHO', 'FOXTROT'])

print('k6 = \n', k6)
print('k6.str.lower() = \n', k6.str.lower())

k6a = k6.str.contains('E[A-z]')
k6b = k6.str.match('E[A-z]')
k6c = k6.str.extract('([N, T, H].)')

print("k6a = \n", k6a)
print("k6b = \n", k6b)
print("k6c = \n", k6c)

k7a = k6.str.slice(1, 3)
k7b = k6.str.slice(3)
k7c = k6.str.split('O').str.get(-1)
k7d = k6.str.cat(k7a)

print('k7a = \n', k7a)
print('k7b = \n', k7b)
print('k7c = \n', k7c)
print('k7d = \n', k7d)

k8 = pd.DataFrame({'x': k6, 'y': ['A|B|C|F', 'B|D', 'C', 'A|D|F', 'E|F', 'B|C|F']})
k8d = k8['y'].str.get_dummies('|')

print('k8 = \n', k8)
print('k8d = \n', k8d)

l1 = np.array('2020-01-31', dtype=np.datetime64)
l2 = np.datetime64('2020-02-09 04:26:27.28', 'ns')

print('l1 = ', l1)
print('l2 = ', l2)
print('l1 + np.arange(10) = \n', l1 + np.arange(10))

l3 = pd.to_datetime('Feb 9, 2020')
l4i = l3 + pd.to_timedelta(np.arange(8), 'W')
l4 = pd.Series(['Feb Week 2', 'Feb Week 3', 'Feb Week 4', 
                'Mar Week 1', 'Mar Week 2', 'Mar Week 3',
                'Mar Week 4', 'Mar Week 5'], index=l4i)

print(l3, l3.strftime(' (%A)'))
print('l4i = \n', l4i)
print('l4 = \n', l4)
print("l4['2020-2'] = \n", l4['2020-2'])
print("l4['2020-3-1':'2020-3-15'] = \n", l4['2020-3-1':'2020-3-15'])

l5a = pd.to_datetime([datetime.datetime(2008, 8, 8), '1st of January, 2020',
                      '20200202', '2011-11-11', '2 Sep 2019', '9 2 2022',
                      'Dec 31 1999', 'January 1 2000'])
l5b = l4.to_period('D')
l5c = l5a - l1


print('l5a = \n', l5a)
print('l5b = \n', l5b)
print('l5c = \n', l5c)

l6a = pd.date_range('20190901', '20200111', periods=4)
l6b = pd.date_range('2019-12-12', '2020-8-8', freq='M')
l6c = pd.period_range('1999-9-9', periods=5, freq='Y')
l6d = pd.timedelta_range(0, periods=3, freq='H')

print('l6a = ', l6a)
print('l6b = ', l6b)
print('l6c = ', l6c)
print('l6d = ', l6d)